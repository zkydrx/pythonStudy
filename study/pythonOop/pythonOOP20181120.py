# -*- coding: UTF-8 -*-
# 多重继承
# 继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。
#
# 回忆一下Animal类层次的设计，假设我们要实现以下4种动物：
#
# Dog - 狗狗；
# Bat - 蝙蝠；
# Parrot - 鹦鹉；
# Ostrich - 鸵鸟。
# 如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：
#
#                 ┌───────────────┐
#                 │    Animal     │
#                 └───────────────┘
#                         │
#            ┌────────────┴────────────┐
#            │                         │
#            ▼                         ▼
#     ┌─────────────┐           ┌─────────────┐
#     │   Mammal    │           │    Bird     │
#     └─────────────┘           └─────────────┘
#            │                         │
#      ┌─────┴──────┐            ┌─────┴──────┐
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog   │  │   Bat   │  │ Parrot  │  │ Ostrich │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
# 但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次：
#
#                 ┌───────────────┐
#                 │    Animal     │
#                 └───────────────┘
#                         │
#            ┌────────────┴────────────┐
#            │                         │
#            ▼                         ▼
#     ┌─────────────┐           ┌─────────────┐
#     │  Runnable   │           │   Flyable   │
#     └─────────────┘           └─────────────┘
#            │                         │
#      ┌─────┴──────┐            ┌─────┴──────┐
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog   │  │ Ostrich │  │ Parrot  │  │   Bat   │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
# 如果要把上面的两种分类都包含进来，我们就得设计更多的层次：
#
# 哺乳类：能跑的哺乳类，能飞的哺乳类；
# 鸟类：能跑的鸟类，能飞的鸟类。
# 这么一来，类的层次就复杂了：
#
#                 ┌───────────────┐
#                 │    Animal     │
#                 └───────────────┘
#                         │
#            ┌────────────┴────────────┐
#            │                         │
#            ▼                         ▼
#     ┌─────────────┐           ┌─────────────┐
#     │   Mammal    │           │    Bird     │
#     └─────────────┘           └─────────────┘
#            │                         │
#      ┌─────┴──────┐            ┌─────┴──────┐
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │  MRun   │  │  MFly   │  │  BRun   │  │  BFly   │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
#      │            │            │            │
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog   │  │   Bat   │  │ Ostrich │  │ Parrot  │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
# 如果要再增加“宠物类”和“非宠物类”，这么搞下去，类的数量会呈指数增长，很明显这样设计是不行的。
#
# 正确的做法是采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：