# -*- coding: UTF-8 -*-
#  高级特性
# 掌握了Python的数据类型、语句和函数，基本上就可以编写出很多有用的程序了。
#
# 比如构造一个1, 3, 5, 7, ..., 99的列表，可以通过循环实现：
L = []
n = 1
while n <= 99:
    L.append(n)
    n = n + 2

print(
    L)  # =>[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
# 取list的前一半的元素，也可以通过循环实现。
#
# 但是在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。
#
# 基于这一思想，我们来介绍Python中非常有用的高级特性，1行代码能实现的功能，决不写5行代码。请始终牢记，代码越少，开发效率越高。

# 切片
# 取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：
L = ["zky1", 'zky2', 'zky3', 'zky4', 'zky5']

print(L)  # => ['zky1', 'zky2', 'zky3', 'zky4', 'zky5']

# 取前3个元素，应该怎么做？
#
# 笨办法：
print([L[0], L[1], L[2]])

# 之所以是笨办法是因为扩展一下，取前N个元素就没辙了。
#
# 取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：
r = []
n = 3
for i in range(n):
    r.append(L[i])
print(r)  # =>['zky1', 'zky2', 'zky3']

# 对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。
#
# 对应上面的问题，取前3个元素，用一行代码就可以完成切片：

print(L[0:3])  # =>['zky1', 'zky2', 'zky3']

# L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
#
# 如果第一个索引是0，还可以省略：

print(L[:3])  # =>['zky1', 'zky2', 'zky3']

# 也可以从索引1开始，取出2个元素出来：
print(L[1:3])  # => ['zky2', 'zky3']
# 类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
print(L[-2:])  # =>['zky4', 'zky5']

print(L[-2:-1])  # =>['zky4']

# 记住倒数第一个元素的索引是-1。
#
# 切片操作十分有用。我们先创建一个0-99的数列：
L = list(range(100))
print(
    L)  # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
# 可以通过切片轻松取出某一段数列。比如前10个数：
print(L[:10])  # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# 后10个数：
print(L[-10:])  # => [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
# 前11-20个数：
print(L[10:20])  # => [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
# 前10个数，每两个取一个：
print(L[:10:2])  # =>[0, 2, 4, 6, 8]
# 所有数，每5个取一个：
print(L[::5])  # =>[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]

# 甚至什么都不写，只写[:]就可以原样复制一个list：
print(L[
      :])  # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

# tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
print((0, 1, 2, 3, 4, 5, 6)[:3])  # => (0, 1, 2)

# 字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：
print("ABCDEFG"[1:4])  # => BCD

print("ABCDEFGHIGKLMN"[::2])  # =>ACEGIKM
print("12345"[:-1])  # =>1234


# 在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。


# 练习
# 利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：
def trim(s):
    temp = ''
    if s[0] == ' ':
        temp = s[1:]
    elif s[-1] == ' ':
        temp = s[:-1]
    elif s[0] == ' ' and s[-1] == ' ':
        temp = s[1:-1]
    else:
        temp = s
    return temp


print('*' + trim(" 1234") + "*")

# 迭代

# 如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。
#
# 在Python中，迭代是通过for ... in来完成的，而很多语言比如C语言，迭代list是通过下标完成的，比如Java代码：
# for (i=0; i<list.length; i++) {
#     n = list[i];
# }
# 可以看出，Python的for循环抽象程度要高于C的for循环，因为Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。
#
# list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

for key in d:
    print(key)  # =>a,b,c,d

# 因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。
#
# 默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。
for value in d.values():
    print(value)  # => 1,2,3,4

for k, v in d.items():
    print(k, v)
# => a 1
# b 2
# c 3
# d 4


# 由于字符串也是可迭代对象，因此，也可以作用于for循环：
for char in 'ABCDEFG':
    print(char)

# A
# B
# C
# D
# E
# F
# G

# 所以，当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。
#
# 那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：
from typing import Iterable

print(isinstance('abc', Iterable))  # => True

print(isinstance([1, 2, 3], Iterable))  # => True

print(isinstance((1, 2, 3), Iterable))  # => True

print(isinstance({'a': 1, 'b': 'yes', 'ok': 'zky'}, Iterable))  # =>True

# 最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：


for i, value in enumerate(['A', 'B', 'C']):
    print(i, value)

# 0 A
# 1 B
# 2 C

# 上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：
for x, y in [(1, 2), (3, 4), (5, 6)]:
    print(x, y)


# 1 2
# 3 4
# 5 6
# 练习
# 请使用迭代查找一个list中最小和最大值，并返回一个tuple：

def findMinAndMax(L):
    if not L:
        min = None
        max = None
    else:
        min = L[0]
        max = L[0]
        for v in L:
            if (v > max):
                max = v
            if (v < min):
                min = v
    Y = (min, max)
    return Y


print(findMinAndMax([1, 2, 3, 4])) # => (1,4)
print(findMinAndMax([])) # => (None,None)

# 测试

if findMinAndMax([]) != (None, None):
    print('测试失败!')
elif findMinAndMax([7]) != (7, 7):
    print('测试失败!')
elif findMinAndMax([7, 1]) != (1, 7):
    print('测试失败!')
elif findMinAndMax([7, 1, 3, 9, 5]) != (1, 9):
    print('测试失败!')
else:
    print('测试成功!')
